<?php

use Minity\Application\Application;
use Minity\Util\MultilevelBag;
use Minity\Controller\ActionFactory;

/**
 * Test class for Application.
 * Generated by PHPUnit on 2012-03-09 at 01:44:54.
 */
class ApplicationTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Application
     */
    protected $app;

    /**
     * @var PHPUnit_Framework_MockObject_MockObject
     */
    protected $request;

    /**
     * @var \Minity\Util\MultilevelBag
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = new MultilevelBag();
        $this->app = new Application($this->config);
        $this->request = $this->getMockBuilder('Minity\Http\Request')
            ->disableOriginalConstructor()
            ->getMock();
    }

    public function testCallControllerAction()
    {
        $url = '/';
        $this->config->set(
            'router.routes',
            array(
                'main' => array(
                    'url' => $url,
                    'action' => 'Default:index'
                )
            )
        );
        $factory = new ActionFactory($this->app->getServices(), $this->request);
        $router = $this->getMock('stdClass', array('match'));
        $this->app->getServices()->set('router', $router);
        $this->app->getServices()->set('action_factory', $factory);
        $routeResult = array(
            'controller' => 'Default',
            'action'     => 'index',
            'params'     => array()
        );
        $router->expects($this->once())
            ->method('match')
            ->with($url)
            ->will($this->returnValue($routeResult));
        $this->request->expects($this->once())
            ->method('getUri')
            ->will($this->returnValue($url));
        $this->app->handle($this->request);
    }

    /**
     * @dataProvider executeActionProvider
     */
    public function testExecuteAction(
        $expectedController,
        $expectedAction,
        $string )
    {
        $factory = $this->getMock(
            'Minity\Controller\ActionFactory',
            array('create'),
            array($this->app->getServices(), $this->request)
        );
        $controller = $this->getMock('Controller', array('execute'));
        $factory->expects($this->once())
            ->method('create')
            ->with($expectedController, $expectedAction)
            ->will($this->returnValue($controller));
        $this->app->getServices()->set('action_factory', $factory);
        $this->app->execute($string, $this->request);
    }

    public function executeActionProvider()
    {
        return array(
            array('Default', 'index', 'Default'),
            array('Default', 'index', 'Default:index'),
            array('Order', 'new', 'Order:new'),
        );
    }

}
